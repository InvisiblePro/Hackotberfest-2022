import java.util.*;
public class Solution {
    
    
    
public static int knapSackRec(int W, int[] wt,int[] val, int n, int dp[][]){
        // Base condition
    if (n == 0 || W == 0)   
        return 0;
         
    if (dp[n][W] != -1)
        return dp[n][W];   
     
    if (wt[n - 1] > W)   
     
        // Store the value of function call   
        // stack in table before return
        return dp[n][W] = knapSackRec(W, wt, val, 
                                      n - 1, dp);
                                       
    else
     
        // Return value of table after storing  
        return dp[n][W] = Math.max((val[n - 1] + 
                              knapSackRec(W - wt[n - 1], val, n - 1, dp)),
                              knapSackRec(W, wt, val, n - 1, dp));
    }
    
    public static int knapsack(int[] weights,int[] values, int n, int maxWeight){
       // Declare the table dynamically
    int dp[][] = new int[n + 1][maxWeight + 1]; 
     
    // Loop to initially filled the 
    // table with -1 
    for(int i = 0; i < dp.length ; i++){
        for(int j = 0; j < dp[0].length ; j++)   
            dp[i][j] = -1;  
    }
        
        int ans = knapSackRec(maxWeight, weights, values , n   , dp);
        return ans;
    }
}
